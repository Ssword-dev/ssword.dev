"use client";
import { FontGroupObject, Fonts } from "./font-utils._tsx"; // Do font stuff
type FontNameOrLink = string;
type FontProps = {
  href: string; // font name or url
  [key: string]: string; // data-*
};

/**
 * Dynamically injects a font stylesheet link into the <head>
 * - if `href` is a URL, uses it directly
 * - if `href` is a font name, wraps with Google Fonts CSS import
 */
function Font({ href, ...props }: FontProps) {
  const isURL = /^https?:\/\//.test(href);
  const encoded = encodeURIComponent(href.trim());
  const fontURL = isURL
    ? href
    : `https://fonts.googleapis.com/css2?family=${encoded}&display=swap`;

  return <link {...props} rel="stylesheet" href={fontURL} />;
}

function FontGroup({ group }: { group: FontGroupObject }) {
  if (!group) {
    throw new Error(
      `Font group must be an object, preferably one from Fonts object, received ${group}`,
    );
  }
  const fontNames = Object.entries(group)
    .filter(([key, value]) => key !== "name" && typeof value === "string")
    .map(([_, value]) => value);

  const uniqueFontNames = Array.from(new Set(fontNames));

  return (
    <>
      {uniqueFontNames.map((font, idx) => (
        <Font key={font + idx} href={font} data-font-group={group.name} />
      ))}
    </>
  );
}

// Assert to next that fonts is not null
if (Fonts === null) {
  console.warn("Fonts is null, please submit an issue to the monorepo");
}

export { Font, FontGroup, Fonts };

// Note: Removed for compilation, see font-utils._tsx note for more info
